""" Module ui.clientmanager 

Class: 
     ClientManager a subclass of Application class.

Methods: 
       getInstance(): Method to get instance of ClientManager object
       
Functions:
         newClient(): Creates new client
         listClients(): List stored clients in tuple 
         saveClients(): Writes stored clients to text file 
         retrieveClients(): Retrieves clients from dictionary based on client_id
         removeClient(): Removes client from dictionary
         modifyClient(): Modifies existing client 
         queryClientPosition(): Returns the position held for a specific security symbol
         listAllClientPositions():
         _menu() to _menu6(): Does operation according to menu item chosen in the GUI
         
Created on 18 February 2018.

@author: Adil Al-Yasiri
"""
import sys
import re
from datetime import datetime

from ui.abstractapp import Application

from server.price import PriceServer
from server.alphavantage import Alphavantage
from trades.client import Client
from trades.position import Position

from trades.PositionException import PositionException
from server.dataunavailable import DataUnavailableEx
from trades.client import ClientException



class ClientManager(Application):
    """A singleton Class simulating a menu-driven client application.
    
    The client manager show options to user and responds to user input 
    by calling appropriate function. The class also contains useful methods
    for querying,creating, updating and deleting clients and their positions.
    
    Variables
    ---------
    instance : 'object'
        stores single instance of client manager object
    """
    
    instance = None
    
    @staticmethod
    def getInstance():
        """Returns instance of ClientManager if an instance has not been created."""
        if not ClientManager.instance :
            ClientManager.instance = ClientManager(Application.getClientsFileName())
        return ClientManager.instance
    
    def __init__(self, clients_file_name):
        """Constructor takes argument for clients file name to initialise super variable
        
        self.clients_file_name, creates a dictionary to store clients and a variable to 
        store the last client id in the dictionary.
        """
        
        self.clients_file_name = clients_file_name 
        
        self.clients = {}
        
        self.last_client_id = 0;
        
        with open(self.clients_file_name, "r") as clients_file :
            #Read the last number of client stored in the file 
            self.last_client_id = int(clients_file.readline())
            for line in clients_file :
                #remove the extra spaces before and after string
                line = line.rstrip()
                #split properties using ':'
                (clt_id, clt_name, clt_email, clt_pos) = line.split(":")
                #store client in trades.Client class 
                client = Client(int(clt_id), clt_name, clt_email)
                if len(clt_pos) > 0 :
                    #if positions greater than 1 split using a ','
                    positions = clt_pos.split(",")
                    for position in positions :
                        #do another split of each position property using a '|'
                        (symbol, qty, acq_date, mod_date) = position.split("|")
                        #add client position by calling the addPosition() function and pass arguments
                        client.addPosition(Position(symbol, int(qty),
                                                    datetime.strptime(acq_date, Position.DATE_FORMAT).date(),
                                                    datetime.strptime(mod_date, Position.DATE_FORMAT).date()
                                                    )
                                            )
                #store client in our dictionary named client    
                self.clients[clt_id] = client
                #The next line was removed because last id is now saved in the file
                #self.last_client_id = (client.getID() if client.getID() > self.last_client_id else self.last_client_id)
    
    #===========================================================================
    # def queryPrice(self, symbol) :
    #     #
    #     # A function querying a security's price from Price Server
    #     # An Data_Unavailable_Ex may be thrown
    #     #
    #     price = self.price_srvr.getLastRecordedPriceBySymbol(symbol.upper())
    #     return price
    #===========================================================================
     
    def newClient(self):
        """Creates a new client.
        
        Variables
        --------
        client_name: expected input 'string'
        client_email: expected input 'string' with embedded @ symbol
        
        Exceptions
        ---------
        @raise exception:ClientException error for invalid input 
        """
        client_name = input ("Please enter the client's name: ")
        client_email = input ("Please enter the client's email address: ")
        
        if re.match("[^0-9]", client_name) is not None:
            raise ClientException("Client name can only contain characters")
        if client_email.find("@") >= 0 :
            self.last_client_id += 1
            #creates client
            my_client = Client(self.last_client_id, client_name, client_email)
            #puts created clients in the diction clients
            self.clients[str(my_client.getID())] = my_client
            return my_client
        else :
            raise ClientException ("Client cannot be created; invalid email address")

    def listClients(self):
        """List the clients stored in dictionary clients."""
        for client in self.clients.values() :
            print(str(client))
            
    def saveClients(self):
        """Save clients to same text file.
        
        first copy last id of client created then write it to file, after which all
        clients saved in dictionary self.clients are sorted by id number and written
        to text file
        """
        with open(self.clients_file_name, "w") as clients_file :
            clients_file.write("%d\n" % self.last_client_id)
            for clt_id in sorted(self.clients.keys()) :
                clients_file.write(str(self.clients[clt_id]) + "\n")
                
    def retrieveClient(self, client_id):
        """Retrieves client based on input client's id.
        
        the function retrieves a client from the clients' dictionary based on client_id
        raises an exception if client_id does not exist.
        
        Arguments
        ---------
        client_id: type integer
            id to retrieve particular client from dictionary
        
        Exception
        ---------
        @raise exception: ClientException Error if user does not exist
        """
        if client_id in self.clients :
            return self.clients[str(client_id)]
        else :
            raise ClientException("Client does not exist")
        
    def removeClient(self, client_id):
        """Removes clients from clients' dictionary based on client_id input.
        
        Arguments
        ---------
        client_id: type integer
            id to remove particular client from dictionary
        """
        client = self.retrieveClient(client_id)
        return self.clients.pop(str(client.getID()))


    def modifyClient(self, client_id):
        """Modifies existing client name and email details. 
        
        Arguments
        ---------
        client_id: of type 'string'
            used to identify client to modify by calling the retrieveClient(client_id)
            function.
            
        Methods
        -------
        setName(): method call to set new name for client
        setEmail(): method call to set new email for client
        
        Returns
        -------
        new modified client.
        """
        client = self.retrieveClient(client_id)
        print ("You have asked to change the details of the client: ", client)
        response = input ("Do you want to change the name [y,n]? ")
        if re.search(r"^[yY]", response) :
            name = input ("Please enter a new name: ")
            client.setName(name)
            
        response = input ("Do you want to change the email [y,n]? ")
        if re.search(r"^[yY]", response) :
            email = input ("Please enter a new email: ")
            client.setEmail(email)
                
        return client
     
        
    def queryClientPosition(self, client_id, symbol):
        #
        # For a retrieved client return the position held for a specific security (symbol)
        # It may raise the PositionException
        #
        client = self.retrieveClient(client_id)
        return client.getPosition(symbol)
    
    
    def listAllClientPositions(self, client_id):
        #
        # For a retrieved client return the position held for a specific security
        #
        client = self.retrieveClient(client_id)
        positions = client.getPositions()
        if not positions :
            print ("Client %s holds no positions!" % client.get_name())
        else :
            print ("Client %s holds the following positions:" % client.get_name())
            for position in positions :
                print ("%d stocks of %s" % (position.getQuantity(), position.getSymbol()))
                
    
    def _menu(self):
        print("""Client's Manager Menu
            Please choose an option: 
            1:    List all clients.
            2:    Create a new client.
            3:    Remove a client.
            4:    Modify a client.
            5:    Query a client's position.
            6:    List all client's positions
            0:    Return to Main Menu
            """)
        try :
            return int(input("Enter your choice: "))
        except ValueError :
            return ""
        
        
    def _menu0(self):
        pass
    
    
    def _menu1(self):
        self.listClients()
 
    
    def _menu2(self):
        client = self.newClient()
        print("Added to the database the client:\n%s" % client)
  
    
    def _menu3(self):
        client_id = self._promptForID()
        removed_client = self.removeClient(client_id)
        print ("The client %s has been removed from the database." % removed_client.get_name())

    
    def _menu4(self):
        client_id = self._promptForID()
        client = self.modifyClient(client_id)
        print("Client's details updated:\n%s" % client)   
        
    def _menu5(self):
        client_id = self._promptForID()
        symbol = self._promptForSymbol()
        position = self.queryClientPosition(client_id, symbol)
        print("The client holds a position of %d stocks on security %s" % (position.getQuantity(), position.getSymbol()))
    def _menu6(self):
        client_id = self._promptForID()
        self.listAllClientPositions(client_id)
                              
    def run(self):
            menu_items = [self._menu0, self._menu1, self._menu2, self._menu3, self._menu4, self._menu5, self._menu6]
            try:
                choice = self._menu()
                if choice in range(0,7) :
                    menu_item = menu_items[choice]
                    menu_item() #gets the option number passed inside the array
                else :
                    print ("Error: Undefined input ", file=sys.stderr)
                    
            except (ClientException, PositionException, DataUnavailableEx) as ex :
                print("Exception: ", ex, file=sys.stderr)

if __name__ == '__main__':
    pass
        
